%YAML 1.2
---
name: EcksDee
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - xd
scope: source.xd
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    # - match: "\""
    #   scope: punctuation.definition.string.begin.xd
    #   push: double_quoted_string


    #Comments! Fix the precise syntax of this comment later!
    - match: "/' "
      scope: punctuation.definition.comment.begin.xd
      push:
        - meta_scope: comment.line.xd
        - match: " '/"
          scope: punctuation.definition.comment.end.xd
          pop: true

    - match: ';'
      scope: punctuation.terminator.xd

    - match: 'func'
      scope: variable.function.xd

    - match: '\b(def|call)\b'
      scope: variable.parameter.xd

    - match: '\b(var|loc)\b'
      scope: variable.language.xd

    - match: '\b(mak|get|mut|del)\b'
      scope: variable.parameter.xd

    - match: '"[^"]*"'
      scope: string.quoted.double.xd

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|while)\b'
      scope: keyword.control.xd

    # Numbers (fix some syntax issues later!)
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.xd

    #Gross gigantic operators area.
    - match: '\+'
      scope: keyword.operator.xd

    - match: '\-'
      scope: keyword.operator.xd

    - match: '\*'
      scope: keyword.operator.xd

    - match: '\/=|\/'
      scope: keyword.operator.xd

    - match: 'swap'
      scope: keyword.operator.xd

    - match: 'dropStack|drop'
      scope: keyword.operator.xd

    - match: 'rot'
      scope: keyword.operator.xd

    - match: 'dup'
      scope: keyword.operator.xd

    - match: '=='
      scope: keyword.operator.xd

    - match: '>=|>'
      scope: keyword.operator.xd

    - match: '<=|<'
      scope: keyword.operator.xd

    - match: '%'
      scope: keyword.operator.xd

    - match: '\+\+'
      scope: keyword.operator.xd

    - match: 'and'
      scope: keyword.operator.xd

    - match: 'xor|or'
      scope: keyword.operator.xd

    - match: 'not'
      scope: keyword.operator.xd

    - match: 'pow'
      scope: keyword.operator.xd

    - match: 'push|p'
      scope: keyword.operator.xd

    - match: 'pop|po'
      scope: keyword.operator.xd

    - match: 'fpush|fp'
      scope: keyword.operator.xd

    - match: 'fpop|fpo'
      scope: keyword.operator.xd

    - match: 'index'
      scope: keyword.operator.xd

    - match: 'length|len'
      scope: keyword.operator.xd

    - match: 'isEmpty'
      scope: keyword.operator.xd

    - match: 'clear'
      scope: keyword.operator.xd

    - match: 'contains'
      scope: keyword.operator.xd

    - match: 'changeItemAt'
      scope: keyword.operator.xd

    - match: 'isWhitespace'
      scope: keyword.operator.xd

    - match: 'cast'
      scope: keyword.operator.xd

    - match: 'queryType'
      scope: keyword.operator.xd

    - match: 'printError|printLine|printChar|print'
      scope: keyword.operator.xd

    - match: 'readLine|readChar|read'
      scope: keyword.operator.xd

    - match: '(add|remove|get|mutate)Field'
      scope: keyword.operator.xd

    - match: 'readFile'
      scope: keyword.operator.xd

    - match: 'writeFile'
      scope: keyword.operator.xd

    # - match: '/='
    #   scope: punctuation.definition.generic.xd

    # - match: '=='
    #   scope: punctuation.definition.generic.xd


    # #Logic Operators (Needs a lot of work)
    # # - match: '==|\/=|>|<|>=|<='
    # #   scope: punctuation.definition.generic.xd

    # #Basic operators.
    # - match: '\+|\-|\*|\/|swap|dropStack|drop|rot|dup|%|\+\+|'
    #   scope: keyword.operator.xd
